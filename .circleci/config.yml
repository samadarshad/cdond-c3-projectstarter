version: 2.1
orbs: 
  slack: circleci/slack@4.8.3
node_image: &node_image
  docker:
    - image: cimg/node:13.8.0
alpine_image: &alpine_image
  docker:
    - image: python:3.7-alpine3.11

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-<< parameters.ID >>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.ID >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.ID >>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      ID:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/RZsxGx1gDwyx48cD2GCq8h/migration_<< parameters.ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist

  test-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
                
  test-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  notify:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > ~/project/inventory.txt
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
            echo ${BACKEND_IP}
            echo ${BACKEND_IP} >> ~/project/inventory.txt
            pwd
            ls
      - persist_to_workspace:
          root: ~/
          paths:
            - project/inventory.txt
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - slack/notify:
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    <<: *alpine_image
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            /usr/local/bin/python -m pip install --upgrade pip 
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["4b:c4:f8:63:b4:4c:99:e3:f2:6d:9c:07:55:1a:32:61"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i ~/project/inventory.txt configure-server.yml
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - slack/notify:
          event: fail
          template: basic_fail_1

  run-migrations:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/RZsxGx1gDwyx48cD2GCq8h/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - slack/notify:
          event: fail
          template: basic_fail_1    

  deploy-frontend:
    <<: *node_image 
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update && sudo apt -y upgrade            
            sudo apt install -y curl
            sudo apt-get install -y python3 python3-pip
            sudo python3 -m pip install --upgrade pip 
            sudo python3 -m pip install awscli
      - checkout
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Rebuild frontend using backend url
          command: |
            cd frontend
            npm install
            npm run build       
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - slack/notify:
          event: fail
          template: basic_fail_1
          

              
  deploy-backend:
    <<: *node_image 
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt -y update && sudo apt -y upgrade            
            sudo apt install -y curl
            sudo apt-get install -y python3 python3-pip
            sudo python3 -m pip install --upgrade pip 
            sudo python3 -m pip install awscli ansible
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["4b:c4:f8:63:b4:4c:99:e3:f2:6d:9c:07:55:1a:32:61"] 
      - run:
          name: Save env vars to backend
          command: |
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo NODE_ENV=$NODE_ENV >> "backend/.env"
      - run:
          name: Rebuild backend using .env file
          command: |
            cd backend
            npm install
            npm run build   
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat ~/project/inventory.txt
            ansible-playbook -i ~/project/inventory.txt -v deploy-backend.yml
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Backend smoke test.
          command: |
              # Fetch and prepare the BACKEND_IP env var
              export BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)
              export API_URL="http://${BACKEND_IP}:3030/api/status"
              echo "${API_URL}"
              sleep 60
              if curl --connect-timeout 5 \
                --max-time 10 \
                --retry 5 \
                --retry-delay 0 \
                --retry-max-time 40 \
                ${API_URL} | grep "ok"
              then
                  exit 0
              else
                  exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
      # - destroy-environment:
      #     ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      # - revert-migrations:
      #     ID: "${CIRCLE_WORKFLOW_ID:0:7}" 


  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" OldWorkflowID=${OldWorkflowID} \
                    --tags project=udapeople
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - slack/notify:
          event: fail
          template: basic_fail_1

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Delete old workflow items
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`OldWorkflowID\`].Value" \
                    --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Deleting old items"
              aws s3 rb s3://udapeople-${OldWorkflowID} --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: UdacitySlack
      - build-backend:
          context: UdacitySlack
      - test-frontend:
          requires: [build-frontend]
          context: UdacitySlack
      - test-backend:
          requires: [build-backend]
          context: UdacitySlack
      - scan-backend:
          requires: [build-backend]
          context: UdacitySlack
      - scan-frontend:
          requires: [build-frontend]
          context: UdacitySlack
      - notify:
          context: UdacitySlack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - deploy-infrastructure:
          context: UdacitySlack
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: UdacitySlack
      - run-migrations:
          requires: [configure-infrastructure]
          context: UdacitySlack
      - deploy-frontend:
          requires: [run-migrations]
          context: UdacitySlack
      - deploy-backend:
          requires: [run-migrations]
          context: UdacitySlack
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context: UdacitySlack
      - cloudfront-update:
          requires: [smoke-test]
          context: UdacitySlack
      - cleanup:
          requires: [cloudfront-update]