version: 2.1
orbs: 
  slack: circleci/slack@4.8.3
node_image: &node_image
  docker:
    - image: cimg/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      ID:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.ID >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.ID >>"
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      ID:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/RZsxGx1gDwyx48cD2GCq8h/migration_<< parameters.ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
             cd frontend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
                
  test-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             cd backend
             npm install
             npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  notify:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > inventory.txt
            export BACKEND_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)
            echo ${BACKEND_IP}
            echo ${BACKEND_IP} >> inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            /usr/local/bin/python -m pip install --upgrade pip 
            pip install awscli
      - add_ssh_keys:
          fingerprints: ["4b:c4:f8:63:b4:4c:99:e3:f2:6d:9c:07:55:1a:32:61"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 

  run-migrations:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/RZsxGx1gDwyx48cD2GCq8h/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
#      # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
    - image: cimg/node:13.8.0
      user: root
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt-get install -y python3 python3-pip
            python3 -m pip install --upgrade pip 
            python3 -m pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(awk '/[web]/{getline; print}' inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
          

              
  deploy-backend:
    docker:
    - image: cimg/node:13.8.0
      user: root
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4b:c4:f8:63:b4:4c:99:e3:f2:6d:9c:07:55:1a:32:61"] 
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt update
            apt-get install -y python3 python3-pip
            python3 -m pip install --upgrade pip 
            python3 -m pip install ansible
      - run:
          name: Save env vars to backend
          command: |
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo NODE_ENV=$NODE_ENV >> "backend/.env"
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt -v deploy-backend.yml
      - destroy-environment:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
          ID: "${CIRCLE_WORKFLOW_ID:0:7}" 
#       # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(awk '/[web]/{getline; print}' .circleci/ansible/inventory.txt)
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #             # Fetch and prepare the BACKEND_IP env var
  #             export API_URL="http://${BACKEND_IP}:3030"
  #             echo "${API_URL}"
  #             if curl "${API_URL}/api/status" | grep "ok"
  #             then
  #                 return 0
  #             else
  #                 return 1
  #             fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: UdacitySlack
      - build-backend:
          context: UdacitySlack
      # - test-frontend:
      #     requires: [build-frontend]
      #     context: UdacitySlack
      # - test-backend:
      #     requires: [build-backend]
      #     context: UdacitySlack
      # - scan-backend:
      #     requires: [build-backend]
      #     context: UdacitySlack
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: UdacitySlack
      # - notify:
      #     context: UdacitySlack
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      # - deploy-frontend
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]